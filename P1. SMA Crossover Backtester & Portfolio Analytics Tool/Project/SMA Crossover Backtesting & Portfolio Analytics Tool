# Advanced SMA Crossover Backtesting Framework (Interactive Input Version)
import pandas as pd
import numpy as np
import yfinance as yf
import matplotlib.pyplot as plt
from datetime import date, datetime
import logging

# Setup Logging
logging.basicConfig(
    filename='trade_log.txt',
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    encoding="utf-8"
)

# --- INPUT FROM USER ---
ticker = input("Enter stock ticker (e.g., TCS.NS): ").strip()
start_date = input("Enter start date (YYYY-MM-DD): ").strip()
end_date_input = input("Enter end date (YYYY-MM-DD) or press Enter for today: ").strip()
end_date = end_date_input if end_date_input else date.today()

initial_capital = float(input("Enter initial capital: ").strip())
short_sma = int(input("Enter short SMA period: ").strip())
long_sma = int(input("Enter long SMA period: ").strip())

# --- FUNCTIONS ---
def fetch_stock_data(ticker, start, end):
    data = yf.download(ticker, start=start, end=end)
    if data.empty:
        raise ValueError("No data fetched. Check ticker or date range.")
    return data

def calculate_sma(df, price_column, period):
    return df[price_column].rolling(window=period).mean()

def generate_signals(df, short_sma, long_sma):
    df['Short_SMA'] = calculate_sma(df, 'Close', short_sma)
    df['Long_SMA'] = calculate_sma(df, 'Close', long_sma)
    df['Signal'] = np.where(df['Short_SMA'] > df['Long_SMA'], 1, 0)
    df['Crossover'] = df['Signal'].diff()
    return df

def backtest_strategy(df, initial_capital):
    capital = initial_capital
    position = 0
    portfolio_value = []
    trade_returns = []
    
    for i in range(len(df)):
        price = df['Close'].iloc[i].item()
        signal = df['Crossover'].iloc[i].item()

        if signal == 1 and capital > 0:  # Buy
            position = capital // price
            capital -= position * price
            logging.info(f"Buy {position} shares at ₹{price:.2f}, Remaining Cash: ₹{capital:.2f}")
        elif signal == -1 and position > 0:  # Sell
            capital += position * price
            ret = capital + (position * price) - initial_capital
            trade_returns.append(ret)
            logging.info(f"Sell {position} shares at ₹{price:.2f}, New Cash: ₹{capital:.2f}")
            position = 0

        portfolio_value.append(capital + (position * price))

    final_value = capital + (position * df['Close'].iloc[-1].item())
    profit = final_value - initial_capital
    roi = profit / initial_capital * 100

    logging.info(f"Final Portfolio Value: ₹{final_value:.2f}")
    logging.info(f"Profit: ₹{profit:.2f}")
    logging.info(f"ROI: {roi:.2f}%")

    return portfolio_value, profit, roi, trade_returns, final_value

def calculate_sharpe(portfolio_value, rf=0.05):
    returns = pd.Series(portfolio_value).pct_change().dropna()
    sharpe = (returns.mean() - rf / 252) / returns.std()
    logging.info(f"Sharpe Ratio: {sharpe:.2f}")
    return sharpe

def max_consecutive_losses(trade_returns):
    max_streak = streak = 0
    for ret in trade_returns:
        if ret < 0:
            streak += 1
            max_streak = max(max_streak, streak)
        else:
            streak = 0
    logging.info(f"Max Consecutive Losses: {max_streak}")
    return max_streak

def calculate_drawdown(portfolio_value):
    series = pd.Series(portfolio_value)
    rolling_max = series.cummax()
    drawdown = (series - rolling_max) / rolling_max
    max_dd = drawdown.min()
    logging.info(f"Max Drawdown: {max_dd:.2%}")
    return drawdown, max_dd

def calculate_cagr(initial_value, final_value, start_date, end_date):
    if isinstance(start_date, str):
        start = datetime.strptime(start_date, "%Y-%m-%d")
    else:
        start = start_date

    if isinstance(end_date, str):
        end = datetime.strptime(end_date, "%Y-%m-%d")
    elif isinstance(end_date, date):
        end = datetime.combine(end_date, datetime.min.time())
    else:
        end = end_date

    years = (end - start).days / 365.25
    if years <= 0:
        raise ValueError("Invalid date range. Duration must be greater than zero.")
    cagr = (final_value / initial_value) ** (1 / years) - 1
    logging.info(f"CAGR: {cagr:.2%}")
    return cagr

def plot_signals(df, ticker):
    plt.figure(figsize=(15, 8))
    plt.plot(df.index, df['Short_SMA'], label=f'{short_sma}-SMA', color='blue')
    plt.plot(df.index, df['Long_SMA'], label=f'{long_sma}-SMA', color='orange')

    plt.scatter(df.index[df['Crossover'] == 1], df['Close'][df['Crossover'] == 1], 
                marker='^', color='green', s=100, label='Buy')
    plt.scatter(df.index[df['Crossover'] == -1], df['Close'][df['Crossover'] == -1], 
                marker='v', color='red', s=100, label='Sell')

    plt.title(f'SMA Crossover Signals: {ticker}')
    plt.xlabel('Date')
    plt.ylabel('Price')
    plt.legend()
    plt.grid()
    plt.show()

def plot_portfolio(df, portfolio_value, drawdown):
    plt.figure(figsize=(15, 8))
    plt.plot(df.index[:len(portfolio_value)], portfolio_value, label="Portfolio Value", color='purple')
    plt.fill_between(df.index[:len(drawdown)], 0, drawdown * 100, color='red', alpha=0.3, label='Drawdown (%)')
    plt.axhline(y=initial_capital, color='grey', linestyle='--', label=f'Initial ₹{initial_capital:,.0f}')
    plt.title('Backtested Portfolio Performance')
    plt.xlabel('Date')
    plt.ylabel('Portfolio Value (₹) / Drawdown (%)')
    plt.legend()
    plt.grid()
    plt.show()

# --- EXECUTION ---
logging.info(f"Starting backtest for {ticker}")
data = fetch_stock_data(ticker, start_date, end_date)
data = generate_signals(data, short_sma, long_sma)
plot_signals(data, ticker)

portfolio_value, profit, roi, trade_returns, final_value = backtest_strategy(data, initial_capital)
sharpe_ratio = calculate_sharpe(portfolio_value)
max_losses = max_consecutive_losses(trade_returns)
drawdown_series, max_dd = calculate_drawdown(portfolio_value)
cagr = calculate_cagr(initial_capital, final_value, start_date, end_date)

plot_portfolio(data, portfolio_value, drawdown_series)

# --- SUMMARY PRINT ---
print("\n🔍 Backtest Summary:")
print(f"Final Portfolio Value: ₹{final_value:,.2f}")
print(f"Profit: ₹{profit:,.2f}")
print(f"ROI: {roi:.2f}%")
print(f"Sharpe Ratio: {sharpe_ratio:.2f}")
print(f"Max Consecutive Losses: {max_losses}")
print(f"Max Drawdown: {max_dd:.2%}")
print(f"CAGR: {cagr:.2%}")
